

1.Image negative – Digital mammogram
% Read the digital mammogram image
img = imread('C:\Users\DELL\Downloads\mammogram.tif');

% Perform image negation
neg_img = 255 - img;

% Display the original and negated images
subplot(1, 2, 1), imshow(img), title('Original Image');
subplot(1, 2, 2), imshow(neg_img), title('Negated Image');

2.Log transformation – Fourier spectrum
% Read the input image
img = imread('input_image.png');
img = double(img);

% Perform log transformation
c = 1; % Constant for log transformation
log_transformed_img = c * log(1 + img);

% Compute Fourier spectrum
fourier_spectrum = fftshift(log(abs(fft2(log_transformed_img))));

% Display the original image, log-transformed image, and Fourier spectrum
subplot(1, 3, 1), imshow(uint8(img)), title('Original Image');
subplot(1, 3, 2), imshow(uint8(log_transformed_img), []), title('Log-Transformed Image');
subplot(1, 3, 3), imagesc(log(abs(fourier_spectrum)+1)), colormap('jet'), colorbar, title('Fourier Spectrum');


3.Gamma transformation – Intensity ramp
% Read the input image
img = imread('input_image.png');
img = double(img);

% Gamma transformation parameters
gamma = 1.5;
c = 1; % Constant for gamma transformation

% Apply gamma transformation
gamma_transformed_img = c * img.^gamma;

% Create intensity ramp for comparison
intensity_ramp = 0:1/255:1;

% Display the original image, gamma-transformed image, and intensity ramp
subplot(1, 3, 1), imshow(uint8(img)), title('Original Image');
subplot(1, 3, 2), imshow(uint8(gamma_transformed_img), []), title('Gamma-Transformed Image');
subplot(1, 3, 3), plot(intensity_ramp, intensity_ramp.^gamma), title('Intensity Ramp (Gamma Transformation)');
xlabel('Input Intensity (Normalized)');
ylabel('Output Intensity (Normalized)');



4.Gamma transformation – MRI of fractured human spine
#4
% Read the MRI image
imagePath = 'C:\Users\DELL\Downloads\spine.tif'; % replace with your image file
I = imread(imagePath);

% Convert the image to double precision for processing
I = im2double(I);

% Display the original image
figure;
imshow(I);
title('Original MRI Image');

% Set the gamma value (adjust this value as needed)
gamma = 0.5;

% Apply gamma transformation
I_gamma = I.^gamma;

% Display the gamma corrected image
figure;
imshow(I_gamma);
title(['Gamma Corrected Image (\gamma = ', num2str(gamma), ')']);

% Save the gamma corrected image
imwrite(I_gamma, 'gamma_corrected_mri_spine.jpg');

% Optional: Adjust contrast using imadjust function
I_adjusted = imadjust(I_gamma);

% Display the adjusted image
figure;
imshow(I_adjusted);
title('Contrast Adjusted Gamma Corrected Image');

% Save the adjusted image
imwrite(I_adjusted, 'adjusted_gamma_corrected_mri_spine.jpg');



5.Gamma transformation – Aerial image
#5
% Read the aerial image
imagePath = 'C:\Users\DELL\Downloads\aerialview-washedout.tif'; % replace with your image file
I = imread(imagePath);

% Convert the image to double precision for processing
I = im2double(I);

% Display the original image
figure;
imshow(I);
title('Original Aerial Image');

% Set the gamma value (adjust this value as needed)
gamma = 0.5;

% Apply gamma transformation
I_gamma = I.^gamma;

% Display the gamma corrected image
figure;
imshow(I_gamma);
title(['Gamma Corrected Image (\gamma = ', num2str(gamma), ')']);

% Save the gamma corrected image
imwrite(I_gamma, 'gamma_corrected_aerial_image.jpg');

% Optional: Adjust contrast using imadjust function
I_adjusted = imadjust(I_gamma);

% Display the adjusted image
figure;
imshow(I_adjusted);
title('Contrast Adjusted Gamma Corrected Image');

% Save the adjusted image
imwrite(I_adjusted, 'adjusted_gamma_corrected_aerial_image.jpg');



#6
% Read the pollen electron microscope image
imagePath = 'pollen_image.jpg'; % replace with your image file
I = imread(imagePath);

% Convert the image to double precision for processing
I = im2double(I);

% Display the original image
figure;
imshow(I);
title('Original Pollen Electron Microscope Image');

% Define the piecewise linear transformation
% For example, mapping [0, 0.2] to [0, 0.4] and [0.2, 1] to [0.4, 1]
r1 = 0.2; s1 = 0.4;
r2 = 1.0; s2 = 1.0;

% Apply piecewise linear transformation
I_transformed = zeros(size(I));

for k = 1:size(I,3)
    I_channel = I(:,:,k);
    I_transformed(:,:,k) = (I_channel <= r1) .* (I_channel * (s1/r1)) + ...
                           (I_channel > r1) .* ((I_channel - r1) * ((s2 - s1)/(r2 - r1)) + s1);
end

% Display the piecewise linear transformed image
figure;
imshow(I_transformed);
title('Piecewise Linear Transformed Image');

% Save the piecewise linear transformed image
imwrite(I_transformed, 'piecewise_linear_transformed_pollen_image.jpg');





#7% Read the aortic angiogram image
imagePath = 'aortic_angiogram.jpg'; % replace with your image file
I = imread(imagePath);

% Convert the image to grayscale if it's not already
if size(I, 3) == 3
    I = rgb2gray(I);
end

% Convert the image to double precision for processing
I = im2double(I);

% Display the original image
figure;
imshow(I);
title('Original Aortic Angiogram Image');

% Define the intensity range to be highlighted
lower_bound = 0.5;
upper_bound = 0.8;

% Create an output image initialized to zeros (black)
I_sliced = zeros(size(I));

% Apply intensity level slicing
I_sliced((I >= lower_bound) & (I <= upper_bound)) = 1;

% Display the intensity level sliced image
figure;
imshow(I_sliced);
title('Intensity Level Sliced Image');

% Save the intensity level sliced image
imwrite(I_sliced, 'intensity_level_sliced_aortic_angiogram.jpg');

% Optional: Overlay the sliced region on the original image
I_overlay = I;
I_overlay((I >= lower_bound) & (I <= upper_bound)) = 1;

% Display the overlay image
figure;
imshow(I_overlay);
title('Overlay of Sliced Region on Original Image');

% Save the overlay image
imwrite(I_overlay, 'overlay_sliced_aortic_angiogram.jpg');





#8
% Read the dollar image
imagePath = 'dollar.jpg'; % replace with your image file
I = imread(imagePath);

% Convert the image to grayscale if it's not already
if size(I, 3) == 3
    I = rgb2gray(I);
end

% Display the original image
figure;
imshow(I);
title('Original Dollar Image');

% Get the size of the image
[rows, cols] = size(I);

% Initialize an array to hold the bit planes
bit_planes = zeros(rows, cols, 8);

% Extract bit planes
for k = 1:8
    bit_planes(:,:,k) = bitget(I, k);
end

% Display the bit planes
figure;
for k = 1:8
    subplot(2, 4, k);
    imshow(bit_planes(:,:,k));
    title(['Bit Plane ', num2str(k)]);
end

% Save the bit planes as images
for k = 1:8
    imwrite(bit_planes(:,:,k), ['bit_plane_', num2str(k), '.jpg']);
end

% Reconstruction of the image from selected bit planes
% For example, we will use the 4 most significant bit planes (bit planes 5 to 8)
reconstructed_image = zeros(rows, cols);

for k = 5:8
    reconstructed_image = reconstructed_image + bit_planes(:,:,k) * 2^(k-1);   
end

% Convert the reconstructed image to uint8
reconstructed_image = uint8(reconstructed_image);

% Display the reconstructed image
figure;
imshow(reconstructed_image);
title('Reconstructed Image from Bit Planes 5 to 8');

% Save the reconstructed image
imwrite(reconstructed_image, 'reconstructed_dollar_image.jpg');




#9
% Read the image
imagePath = 'image.jpg'; % replace with your image file
I = imread(imagePath);

% Convert to grayscale if the image is RGB
if size(I, 3) == 3
    I_gray = rgb2gray(I);
else
    I_gray = I;
end

% Display the original image
figure;
imshow(I);
title('Original Image');

% 1. Histogram of Original Image
figure;
imhist(I_gray);
title('Histogram of Original Image');

% 2. Histogram Equalization
I_equalized = histeq(I_gray);

% Display the equalized image
figure;
imshow(I_equalized);
title('Histogram Equalized Image');

% Display the equalized histogram
figure;
imhist(I_equalized);
title('Equalized Histogram');

% 3. Cumulative Histogram
[counts, binLocations] = imhist(I_gray);
cumulativeCounts = cumsum(counts);

figure;
plot(binLocations, cumulativeCounts);
title('Cumulative Histogram');
xlabel('Pixel Intensity');
ylabel('Cumulative Frequency');

% 4. Histograms of Specific Channels (for RGB images)
if size(I, 3) == 3
    % Extract the individual Red, Green, and Blue color channels
    R = I(:,:,1);
    G = I(:,:,2);
    B = I(:,:,3);

    % Display the histograms of the individual color channels
    figure;
    subplot(3, 1, 1);
    imhist(R);
    title('Histogram of Red Channel');

    subplot(3, 1, 2);
    imhist(G);
    title('Histogram of Green Channel');

    subplot(3, 1, 3);
    imhist(B);
    title('Histogram of Blue Channel');
end





#10
% Read the image
imagePath = 'image.jpg'; % replace with your image file
I = imread(imagePath);

% Convert to grayscale if the image is RGB
if size(I, 3) == 3
    I_gray = rgb2gray(I);
else
    I_gray = I;
end

% Display the original image and its histogram
figure;
subplot(2, 2, 1);
imshow(I_gray);
title('Original Image');

subplot(2, 2, 2);
imhist(I_gray);
title('Histogram of Original Image');

% Standard Histogram Equalization
I_eq = histeq(I_gray);

% Display the equalized image and its histogram+
figure;
subplot(2, 2, 1);
imshow(I_eq);
title('Standard Histogram Equalized Image');

subplot(2, 2, 2);
imhist(I_eq);
title('Histogram of Equalized Image');

% Display the transformation function
[counts, binLocations] = imhist(I_gray);
transformation_function = cumsum(counts) / numel(I_gray);
subplot(2, 2, 3);
plot(binLocations, transformation_function);
title('Transformation Function for Standard Equalization');
xlabel('Input Intensity');
ylabel('Output Intensity');

% Adaptive Histogram Equalization (CLAHE)
I_adapteq = adapthisteq(I_gray, 'ClipLimit', 0.02);

% Display the CLAHE image and its histogram
figure;
subplot(2, 2, 1);
imshow(I_adapteq);
title('Adaptive Histogram Equalized Image');

subplot(2, 2, 2);
imhist(I_adapteq);
title('Histogram of Adaptive Equalized Image');

% Display the transformation function (approximate for CLAHE)
subplot(2, 2, 3);
clahe_transformation_function = cumsum(imhist(I_adapteq)) / numel(I_adapteq);
plot(binLocations, clahe_transformation_function);
title('Transformation Function for Adaptive Equalization');
xlabel('Input Intensity');
ylabel('Output Intensity');

% Local Histogram Equalization (using a sliding window approach)
window_size = 15; % Define the size of the local window
I_local_eq = nlfilter(I_gray, [window_size window_size], @(block) histeq(block(:), 256));

% Display the local equalized image and its histogram
figure;
subplot(2, 2, 1);
imshow(I_local_eq);
title('Local Histogram Equalized Image');

subplot(2, 2, 2);
imhist(I_local_eq);
title('Histogram of Local Equalized Image');

% Global Histogram Equalization with specified limits
low_in = 0.2; % Lower limit
high_in = 0.8; % Upper limit
I_specified = imadjust(I_gray, [low_in high_in], [0 1]);

% Display the global specified equalized image and its histogram
figure;
subplot(2, 2, 1);
imshow(I_specified);
title('Global Specified Equalized Image');

subplot(2, 2, 2);
imhist(I_specified);
title('Histogram of Specified Equalized Image');

% Display the transformation function for specified equalization
subplot(2, 2, 3);
specified_transformation_function = linspace(low_in, high_in, 256);
plot(specified_transformation_function, linspace(0, 1, 256));
title('Transformation Function for Specified Equalization');
xlabel('Input Intensity');
ylabel('Output Intensity');



#11
% Read the Phobos image
imagePath = 'phobos.jpg'; % replace with your image file
I = imread(imagePath);

% Convert to grayscale if the image is RGB
if size(I, 3) == 3
    I_gray = rgb2gray(I);
else
    I_gray = I;
end

% Display the original image and its histogram
figure;
subplot(2, 3, 1);
imshow(I_gray);
title('Original Phobos Image');

subplot(2, 3, 4);
imhist(I_gray);
title('Histogram of Original Image');

% 1. Histogram Equalization
I_eq = histeq(I_gray);

% Display the equalized image and its histogram
subplot(2, 3, 2);
imshow(I_eq);
title('Histogram Equalized Image');

subplot(2, 3, 5);
imhist(I_eq);
title('Histogram of Equalized Image');

% 2. Histogram Specification
% Create a reference histogram (e.g., a normal distribution centered around 128)
reference_hist = normpdf(0:255, 128, 30);
reference_hist = reference_hist / sum(reference_hist); % Normalize to make it a probability distribution

% Histogram matching
I_spec = histeq(I_gray, reference_hist);

% Display the histogram specified image and its histogram
subplot(2, 3, 3);
imshow(I_spec);
title('Histogram Specified Image');

subplot(2, 3, 6);
imhist(I_spec);
title('Histogram of Specified Image');

% Display the transformation functions
figure;

% Transformation function for Histogram Equalization
[counts, binLocations] = imhist(I_gray);
transformation_function_eq = cumsum(counts) / numel(I_gray);
subplot(1, 2, 1);
plot(binLocations, transformation_function_eq);
title('Transformation Function for Histogram Equalization');
xlabel('Input Intensity');
ylabel('Output Intensity');

% Transformation function for Histogram Specification
transformation_function_spec = cumsum(reference_hist);
subplot(1, 2, 2);
plot(0:255, transformation_function_spec);
title('Transformation Function for Histogram Specification');
xlabel('Input Intensity');
ylabel('Output Intensity');




#12
% Read the black squares image
imagePath = 'black_squares.jpg'; % replace with your image file
I = imread(imagePath);

% Convert to grayscale if the image is RGB
if size(I, 3) == 3
    I_gray = rgb2gray(I);
else
    I_gray = I;
end

% Display the original image
figure;
subplot(2, 3, 1);
imshow(I_gray);
title('Original Image');

% Global Histogram Equalization
I_global_eq = histeq(I_gray);

% Display the globally equalized image and its histogram
subplot(2, 3, 2);
imshow(I_global_eq);
title('Global Histogram Equalized Image');

subplot(2, 3, 5);
imhist(I_global_eq);
title('Histogram of Global Equalized Image');

% Local Histogram Equalization (Adaptive Histogram Equalization)
I_local_eq = adapthisteq(I_gray, 'ClipLimit', 0.02, 'Distribution', 'uniform');

% Display the locally equalized image and its histogram
subplot(2, 3, 3);
imshow(I_local_eq);
title('Local Histogram Equalized Image');

subplot(2, 3, 6);
imhist(I_local_eq);
title('Histogram of Local Equalized Image');

% Display histograms of the original image for comparison
subplot(2, 3, 4);
imhist(I_gray);
title('Histogram of Original Image');



#13
% Read the black squares image
imagePath = 'black_squares.jpg'; % replace with your image file
I = imread(imagePath);

% Convert to grayscale if the image is RGB
if size(I, 3) == 3
    I_gray = rgb2gray(I);
else
    I_gray = I;
end

% Display the original image
figure;
subplot(2, 3, 1);
imshow(I_gray);
title('Original Image');

% Define the window size for local statistics
window_size = 15;

% Local mean
local_mean = colfilt(I_gray, [window_size window_size], 'sliding', @mean);

% Display the local mean image
subplot(2, 3, 2);
imshow(local_mean, []);
title('Local Mean');

% Local standard deviation
local_std = colfilt(I_gray, [window_size window_size], 'sliding', @std);

% Display the local standard deviation image
subplot(2, 3, 3);
imshow(local_std, []);
title('Local Standard Deviation');

% Local histogram equalization (Adaptive Histogram Equalization)
I_local_eq = adapthisteq(I_gray, 'ClipLimit', 0.02, 'Distribution', 'uniform', 'NumTiles', [8 8]);

% Display the locally equalized image
subplot(2, 3, 4);
imshow(I_local_eq);
title('Local Histogram Equalized Image');

% Display the histogram of the original image
subplot(2, 3, 5);
imhist(I_gray);
title('Histogram of Original Image');

% Display the histogram of the locally equalized image
subplot(2, 3, 6);
imhist(I_local_eq);
title('Histogram of Local Equalized Image');

% Optional: Displaying local histograms for a specific region
% Define a specific region to display local histogram
row = 50; % row index of the center of the region
col = 50; % column index of the center of the region
region = I_gray(row-window_size//2:row+window_size//2, col-window_size//2:col+window_size//2);

figure;
subplot(1, 2, 1);
imshow(region, []);
title('Specific Region');

subplot(1, 2, 2);
imhist(region);
title('Histogram of Specific Region');




#14
% Generate a 1024x1024 test pattern (replace with your actual test pattern)
test_pattern = checkerboard(64, 16);

% Display the original test pattern
figure;
subplot(1, 2, 1);
imshow(test_pattern);
title('Original Test Pattern');

% Define the box filter kernel (box blur)
kernel_size = 15; % Adjust kernel size as needed
box_kernel = ones(kernel_size) / (kernel_size^2); % Normalized box kernel

% Perform low-pass filtering using convolution
filtered_pattern = conv2(test_pattern, box_kernel, 'same');

% Display the filtered test pattern
subplot(1, 2, 2);
imshow(filtered_pattern, []);
title('Filtered Test Pattern');




#15
% Generate a 1024x1024 test pattern (replace with your actual test pattern)
test_pattern = checkerboard(64, 16);

% Display the original test pattern
figure;
subplot(1, 2, 1);
imshow(test_pattern);
title('Original Test Pattern');

% Define the standard deviation for the Gaussian kernel
sigma = 5; % Adjust sigma value as needed

% Perform low-pass filtering using a Gaussian kernel
filtered_pattern = imgaussfilt(test_pattern, sigma);

% Display the filtered test pattern
subplot(1, 2, 2);
imshow(filtered_pattern);
title('Filtered Test Pattern (Gaussian)');




#16
% Generate a 1024x1024 test pattern (replace with your actual test pattern)
test_pattern = checkerboard(64, 16);

% Display the original test pattern
figure;
subplot(1, 3, 1);
imshow(test_pattern);
title('Original Test Pattern');

% Define the kernel sizes and standard deviation for the filters
box_kernel_size = 15; % Adjust box kernel size as needed
gaussian_sigma = 5;   % Adjust Gaussian sigma value as needed

% Apply box filter smoothing
box_filtered_pattern = imboxfilt(test_pattern, box_kernel_size);

% Display the box filter smoothed pattern
subplot(1, 3, 2);
imshow(box_filtered_pattern);
title('Box Filter Smoothing');

% Apply Gaussian filter smoothing
gaussian_filtered_pattern = imgaussfilt(test_pattern, gaussian_sigma);

% Display the Gaussian filter smoothed pattern
subplot(1, 3, 3);
imshow(gaussian_filtered_pattern);
title('Gaussian Filter Smoothing');




#17
% Create a 1024x1024 test pattern with a white rectangle on a black background
test_pattern = zeros(1024, 1024);
rectangle_width = 200;
rectangle_height = 400;
start_x = (1024 - rectangle_width) / 2;
start_y = (1024 - rectangle_height) / 2;
test_pattern(start_y:start_y+rectangle_height-1, start_x:start_x+rectangle_width-1) = 255;

% Display the original test pattern
figure;
subplot(1, 3, 1);
imshow(test_pattern, [0, 255]);
title('Original Test Pattern');

% Define the kernel sizes and standard deviation for the filters
box_kernel_size = 15; % Adjust box kernel size as needed
gaussian_sigma = 5;   % Adjust Gaussian sigma value as needed

% Apply box filter smoothing
box_filtered_pattern = imboxfilt(test_pattern, box_kernel_size);

% Display the box filter smoothed pattern
subplot(1, 3, 2);
imshow(box_filtered_pattern, [0, 255]);
title('Box Filter Smoothing');

% Apply Gaussian filter smoothing
gaussian_filtered_pattern = imgaussfilt(test_pattern, gaussian_sigma);

% Display the Gaussian filter smoothed pattern
subplot(1, 3, 3);
imshow(gaussian_filtered_pattern, [0, 255]);
title('Gaussian Filter Smoothing');




#18
% Generate a 1024x1024 test pattern
test_pattern = checkerboard(64, 16);

% Define filter parameters
kernel_size = 15; % Kernel size for filtering
sigma = 5;        % Sigma value for Gaussian filter

% Apply filtering with different padding approaches
zero_padded = imfilter(test_pattern, fspecial('gaussian', kernel_size, sigma), 'conv', 'zero');
replicate_padded = imfilter(test_pattern, fspecial('gaussian', kernel_size, sigma), 'conv', 'replicate');
symmetric_padded = imfilter(test_pattern, fspecial('gaussian', kernel_size, sigma), 'conv', 'symmetric');

% Display results
figure;
subplot(2, 2, 1);
imshow(test_pattern);
title('Original Test Pattern');

subplot(2, 2, 2);
imshow(zero_padded);
title('Zero-Padded');

subplot(2, 2, 3);
imshow(replicate_padded);
title('Replicate-Padded');

subplot(2, 2, 4);
imshow(symmetric_padded);
title('Symmetric-Padded');





#19
% Define image sizes and kernel sizes to test
image_sizes = [512, 1024, 2048, 4096]; % Change this as needed
kernel_sizes = [3, 5, 7, 9, 11];       % Change this as needed

% Initialize arrays to store execution times
execution_times = zeros(length(image_sizes), length(kernel_sizes));

% Loop over image sizes
for i = 1:length(image_sizes)
    % Generate a test pattern of the current size
    test_pattern = checkerboard(64, image_sizes(i));
    
    % Loop over kernel sizes
    for j = 1:length(kernel_sizes)
        % Apply Gaussian smoothing and measure execution time
        tic;
        filtered_pattern = imgaussfilt(test_pattern, kernel_sizes(j));
        execution_times(i, j) = toc;
    end
end

% Plot execution times
figure;
surf(kernel_sizes, image_sizes, execution_times);
xlabel('Kernel Size');
ylabel('Image Size');
zlabel('Execution Time (s)');
title('Gaussian Smoothing Performance');




#20
% Read the Hubble telescope image
imagePath = 'hubble_image.jpg'; % replace with your image file
hubble_image = imread(imagePath);

% Convert to grayscale if the image is RGB
if size(hubble_image, 3) == 3
    hubble_gray = rgb2gray(hubble_image);
else
    hubble_gray = hubble_image;
end

% Thresholding to extract regions
threshold = 100; % Adjust threshold value as needed
binary_image = hubble_gray > threshold;

% Perform morphological operations to clean up the binary image (optional)
binary_image = imfill(binary_image, 'holes'); % Fill holes in regions
binary_image = bwareaopen(binary_image, 1000); % Remove small regions

% Display the original image and the extracted regions
figure;
subplot(1, 2, 1);
imshow(hubble_gray);
title('Original Hubble Image');

subplot(1, 2, 2);
imshow(binary_image);
title('Extracted Regions');




#21
% Generate a checkerboard pattern
board_size = 512; % Define the size of the checkerboard pattern
checkerboard_image = checkerboard(64, board_size/16);

% Simulate shading by adding a smooth gradient
[X, Y] = meshgrid(1:board_size);
gradient = (X + Y) / (board_size*2); % Create a smooth gradient
shaded_checkerboard = checkerboard_image + gradient;

% Shading correction
shading_corrected_image = shaded_checkerboard - smooth2a(shaded_checkerboard, 25); % Adjust smoothing parameter as needed

% Display the original checkerboard image and the shading corrected image
figure;
subplot(1, 2, 1);
imshow(shaded_checkerboard, []);
title('Original Checkerboard with Shading');

subplot(1, 2, 2);
imshow(shading_corrected_image, []);
title('Shading Corrected Checkerboard');




#22
% Read the X-ray image of the circuit board
imagePath = 'circuit_board_xray.jpg'; % replace with your image file
circuit_board_xray = imread(imagePath);

% Convert to grayscale if the image is RGB
if size(circuit_board_xray, 3) == 3
    circuit_board_gray = rgb2gray(circuit_board_xray);
else
    circuit_board_gray = circuit_board_xray;
end

% Apply median filtering
median_filtered_image = medfilt2(circuit_board_gray);

% Apply mean filtering
mean_filtered_image = imfilter(double(circuit_board_gray), fspecial('average', 3));

% Display the original image and the filtered images
figure;
subplot(1, 3, 1);
imshow(circuit_board_gray);
title('Original Image');

subplot(1, 3, 2);
imshow(median_filtered_image);
title('Median Filtered Image');

subplot(1, 3, 3);
imshow(uint8(mean_filtered_image));
title('Mean Filtered Image');




#23
% Read the image of the north pole of the moon
imagePath = 'moon_north_pole.jpg'; % replace with your image file
moon_north_pole = imread(imagePath);

% Convert to grayscale if the image is RGB
if size(moon_north_pole, 3) == 3
    moon_gray = rgb2gray(moon_north_pole);
else
    moon_gray = moon_north_pole;
end

% Apply Laplacian filter for image sharpening
laplacian_filter = fspecial('laplacian', 0.5); % Adjust the scale parameter as needed
sharpened_image = moon_gray + imfilter(moon_gray, laplacian_filter);

% Display the original image and the sharpened image
figure;
subplot(1, 2, 1);
imshow(moon_gray);
title('Original Image');

subplot(1, 2, 2);
imshow(sharpened_image, []);
title('Sharpened Image (Laplacian Filter)');




#24
% Read the DIP-XE image
imagePath = 'dip_xe_image.jpg'; % replace with your image file
dip_xe_image = imread(imagePath);

% Convert to grayscale if the image is RGB
if size(dip_xe_image, 3) == 3
    dip_xe_gray = rgb2gray(dip_xe_image);
else
    dip_xe_gray = dip_xe_image;
end

% Convert to double for high-boost filtering
dip_xe_double = im2double(dip_xe_gray);

% Define parameters
mask_size = 3; % Size of the mask for unsharp masking
k = 2; % Boosting factor for high-boost filtering

% Apply unsharp masking
blurred_image = imgaussfilt(dip_xe_double, 2); % Adjust sigma value as needed
mask = dip_xe_double - blurred_image;
unsharp_masking_result = dip_xe_double + mask;

% Apply high-boost filtering
high_boost_result = dip_xe_double + k * mask;

% Display the original image and the processed images
figure;
subplot(2, 2, 1);
imshow(dip_xe_gray);
title('Original Image');

subplot(2, 2, 2);
imshow(unsharp_masking_result);
title('Unsharp Masking');

subplot(2, 2, 3);
imshow(high_boost_result);
title('High-Boost Filtering');




#25
% Read the contact lens image
imagePath = 'contact_lens_image.jpg'; % replace with your image file
contact_lens_image = imread(imagePath);

% Convert to grayscale if the image is RGB
if size(contact_lens_image, 3) == 3
    contact_lens_gray = rgb2gray(contact_lens_image);
else
    contact_lens_gray = contact_lens_image;
end

% Compute the Sobel gradients in the horizontal and vertical directions
sobel_horizontal = imfilter(double(contact_lens_gray), fspecial('sobel')');
sobel_vertical = imfilter(double(contact_lens_gray), fspecial('sobel'));

% Compute the magnitude of the gradient
sobel_magnitude = sqrt(sobel_horizontal.^2 + sobel_vertical.^2);

% Display the original image and the Sobel gradient magnitude
figure;
subplot(1, 2, 1);
imshow(contact_lens_gray);
title('Original Image');

subplot(1, 2, 2);
imshow(uint8(sobel_magnitude));
title('Sobel Gradient Magnitude');
